dailySteps <- summarize(aDataTbl,total=sum(steps,na.rm=TRUE))
View(dailySteps)
save <- summarize(aDataTbl,total=sum(steps))
View(save)
fname="./activity/activity.csv"  #set filename
# Load libraries
library(lubridate)
library(dplyr)
#Read in data
aData<-read.csv(fname,stringsAsFactors=FALSE)
#  Convert dates from character to POSIXct class
dates<- ymd(aData$date)
aData$date <- dates
#head(aData); str(aData);tail(aData)
aDataTbl = group_by(tbl_df(aData),date)
## What is mean total number of steps taken per day?
save <- summarize(aDataTbl,total=sum(steps))
dailySteps <- summarize(aDataTbl,total=sum(steps,))
dailyMean <- summarize(aDataTbl,avgDayStep=mean(steps))
allMean <- mean(dailyMean$avgDayStep)
periodMean=mean(dailySteps$total,na.rm=TRUE)
dailyMedian = median(dailySteps$total,na.rm=TRUE)
# make a histogrm of daily steps
hist(dailySteps$total)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
getwd()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(intervalMean)
source('~/.active-rstudio-document', echo=TRUE)
diffMean <- dailyMeanF$avgDayStep - dailyMean$avgDayStep
diffMean
with(diffMean,plot(interval))
View(aDataF)
View(aDataF)
for(i in seq_along(idx)) {
intrv = aDataF[idx,]$interval
#debug print statements
print("idx,intrv"; print(idx);print(intrv)
for(i in seq_along(idx)) {
intrv = aDataF[idx,]$interval
#debug print statements
print("idx,intrv"); print(idx);print(intrv)
x=which(intervalMean$interval==intrv)
#        aDataF[idx,]$steps = intervalMean[x,]$avgByInterval
print("aDataF");print(aDataF[idx,]$steps)
aDataF[idx,]$steps = 100
print("aDataF");print(aDataF[idx,]$steps)
}
for(i in (1:5)) {
intrv = aDataF[idx,]$interval
#debug print statements
print("idx,intrv"); print(idx);print(intrv)
x=which(intervalMean$interval==intrv)
print("aDataF");print(aDataF[idx,]$steps[1:5])
aDataF[idx,]$steps = intervalMean[x,]$avgByInterval
print("aDataF");print(aDataF[idx,]$steps[1:5])
#aDataF[idx,]$steps = 100
#print("aDataF");print(aDataF[idx,]$steps[1:5])
}
aDataF <- aData
#for(i in seq_along(idx)) {
for(i in (1:5)) {
intrv = aDataF[idx,]$interval
#debug print statements
print("idx,intrv"); print(idx);print(intrv)
x=which(intervalMean$interval==intrv)
print("aDataF");print(aDataF[idx,]$steps[1:5])
aDataF[idx,]$steps = intervalMean[x,]$avgByInterval[1:5]
print("aDataF");print(aDataF[idx,]$steps[1:5])
#aDataF[idx,]$steps = 100
#print("aDataF");print(aDataF[idx,]$steps[1:5])
}
print("idx,intrv"); print(idx);print(intrv[1:5])
aDataF <- aData
#for(i in seq_along(idx)) {
for(i in (1:5)) {
intrv = aDataF[idx,]$interval
#debug print statements
print("idx,intrv"); print(idx);print(intrv[1:5])
x=which(intervalMean$interval==intrv)
print("aDataF");print(aDataF[idx,]$steps[1:5])
aDataF[idx,]$steps = intervalMean[x,]$avgByInterval[1:5]
print("aDataF");print(aDataF[idx,]$steps[1:5])
#aDataF[idx,]$steps = 100
#print("aDataF");print(aDataF[idx,]$steps[1:5])
}
aDataF <- aData
#for(i in seq_along(idx)) {
for(i in (1:5)) {
intrv = aDataF[idx,]$interval
#debug print statements
print("idx,intrv"); print(idx[1:5]);print(intrv[1:5])
x=which(intervalMean$interval==intrv)
print("aDataF");print(aDataF[idx,]$steps[1:5])
aDataF[idx,]$steps = intervalMean[x,]$avgByInterval[1:5]
print("aDataF");print(aDataF[idx,]$steps[1:5])
#aDataF[idx,]$steps = 100
#print("aDataF");print(aDataF[idx,]$steps[1:5])
}
```
}
for(i in seq_along(idx)) {
intrv = aDataF[idx,]$interval
#debug print statements
print("idx,intrv"); print(idx[1:5]);print(intrv[1:5])
x=which(intervalMean$interval==intrv)
print("aDataF");print(aDataF[idx,]$steps[1:5])
aDataF[idx,]$steps = intervalMean[x,]$avgByInterval[1:5]
print("aDataF");print(aDataF[idx,]$steps[1:5])
#aDataF[idx,]$steps = 100
#print("aDataF");print(aDataF[idx,]$steps[1:5])
if(i>5){break}
}
print("1. aDataF");print(aDataF[idx,]$steps[1:5])
aDataF[idx,]$steps = intervalMean[x,]$avgByInterval[1:5]
aDataF[idx,]$steps = intervalMean[x,]$avgByInterval
print("aDataF");print(aDataF[idx,]$steps[1:5])
#aDataF[idx,]$steps = 100
#print("aDataF");print(aDataF[idx,]$steps[1:5])
if(i>5){break}
aDataF <- aData
for(i in seq_along(idx)) {
intrv = aDataF[idx,]$interval
#debug print statements
print("idx,intrv"); print(idx[1:5]);print(intrv[1:5])
x=which(intervalMean$interval==intrv)
print("1. aDataF");print(aDataF[idx,]$steps[1:5])
aDataF[idx,]$steps = intervalMean[x,]$avgByInterval
print("aDataF");print(aDataF[idx,]$steps[1:5])
#aDataF[idx,]$steps = 100
#print("aDataF");print(aDataF[idx,]$steps[1:5])
if(i>5){break}
}
source('~/.active-rstudio-document', echo=TRUE)
fname="./activity/activity.csv"  #set filename for knitr
# fname="activity.csv"  #set filename
# Load libraries
library(lubridate)
library(dplyr)
#Read in data
aData<-read.csv(fname,stringsAsFactors=FALSE)
#  Convert dates from character to POSIXct class
dates<- ymd(aData$date)
aData$date <- dates
#head(aData); str(aData);tail(aData)
aDataTbl = group_by(tbl_df(aData),date)
## What is mean total number of steps taken per day?
save <- summarize(aDataTbl,total=sum(steps))
dailySteps <- summarize(aDataTbl,total=sum(steps))
dailyMean <- summarize(aDataTbl,avgDayStep=mean(steps))
allMean <- mean(dailyMean$avgDayStep)
periodMean=mean(dailySteps$total,na.rm=TRUE)
dailyMedian = median(dailySteps$total,na.rm=TRUE)
# make a histogrm of daily steps
hist(dailySteps$total)
#Clean up missing data
aDataInt = group_by(tbl_df(aData),interval)
idx=!is.na(aDataInt$steps)
aDataInt=aDataInt[idx,]
intervalMean = summarize(aDataInt,avgByInterval=mean(steps))
with(intervalMean,plot(interval,avgByInterval,type="l"))
max=max(intervalMean[[2]])
y=intervalMean[which(intervalMean$avgByInterval==max),]
intervalMax=y[[1]]
intervalMax
colSums(is.na(aData))
sum(is.na(aData$steps))
idx=which(is.na(aData$steps))  #find the indexes for the na values
aDataF <- aData
for(i in seq_along(idx)) {
intrv = aDataF[idx,]$interval
#debug print statements
#       print("idx,intrv"); print(idx[1:5]);print(intrv[1:5])
x=which(intervalMean$interval==intrv)
#      print("1. aDataF");print(aDataF[idx,]$steps[1:5])
aDataF[idx,]$steps = intervalMean[x,]$avgByInterval
#     print("aDataF");print(aDataF[idx,]$steps[1:5])
#aDataF[idx,]$steps = 100
#print("aDataF");print(aDataF[idx,]$steps[1:5])
}
aDataFTbl = group_by(tbl_df(aDataF),date)
dailyStepsF <- summarize(aDataFTbl,total=sum(steps))
dailyMeanF <- summarize(aDataFTbl,avgDayStep=mean(steps))
periodMeanF <- mean(dailyStepsF$total,na.rm=TRUE)
dailyMedianF <- median(dailyStepsF$total,na.rm=TRUE)
# make a new histogrm of daily steps with missing data "filled"; compare to original
par(mfrow=c(1,2))
hist(dailySteps$total)
hist(dailyStepsF$total)
#debugging code
aData[380:400,]$steps
aDataF[380:400,]$steps
View(aData)
aData[1:100,]$steps
aDataF[1:100,]$steps
aData[1:1000,]$steps
mean(aData[1:1000,]$steps)
aDataF[1:1000,]$steps
mean(aDataF[1:1000,]$steps)
aData[1:1000,]$steps
mean(aData[1:1000,]$steps)
aDataTbl[1:1000,]$steps
mean(aDataTbl[1:1000,]$steps)
aDataF[1:1000,]$steps
mean(aDataF[1:1000,]$steps)
mean(aDataInt[1:1000,]$steps)
idx=which(is.na(aData$steps))  #find the indexes for the na values
aDataF <- aData
for(i in seq_along(idx)) {
intrv = aDataF[idx,]$interval
#debug print statements
#       print("idx,intrv"); print(idx[1:5]);print(intrv[1:5])
x=which(intervalMean$interval==intrv)
#      print("1. aDataF");print(aDataF[idx,]$steps[1:5])
aDataF[idx,]$steps = intervalMean[x,]$avgByInterval
#     print("aDataF");print(aDataF[idx,]$steps[1:5])
#     aDataF[idx,]$steps = 1000
#print("aDataF");print(aDataF[idx,]$steps[1:5])
}
# aData[1:1000,]$steps
mean(aData[1:5000,]$steps)
#aDataTbl[1:1000,]$steps
mean(aDataTbl[1:5000,]$steps)
mean(aDataInt[1:5000,]$steps)
#aDataF[1:1000,]$steps
mean(aDataF[1:5000,]$steps)
mean(aDataF[1:3000,]$steps)
mean(aDataF[1:1000,]$steps)
mean(aDataF[1:2000,]$steps)
mean(aDataF[1:3000,]$steps)
idx2=is.na(aDataF[1:3000,]$steps)
idx2[idx2=TRUE]
adataf[2025,]
View(aDataF)
aDataF[2025,]
idx=which(is.na(aData$steps))  #find the indexes for the na values
source('~/JSDocs/Home/Coursera/Reproducible Research/Course Projects/RepData_PeerAssessment1/activity/Debug.R', echo=TRUE)
debug
debugSource('~/JSDocs/Home/Coursera/Reproducible Research/Course Projects/RepData_PeerAssessment1/activity/Debug.R', echo=TRUE)
idx
i
for(i in seq_along(idx)) {
intrv = aDataF[idx[i],]$interval
#debug print statements
print("idx,intrv"); print(idx[1:5]);print(intrv)
x=which(intervalMean$interval==intrv)
print("1. aDataF");print(aDataF[idx,]$steps)
aDataF[idx[i],]$steps = intervalMean[x,]$avgByInterval
print("aDataF");print(aDataF[idx[i],]$steps)
#     aDataF[idx,]$steps = 1000
#print("aDataF");print(aDataF[idx,]$steps[1:5])
}
debugSource('~/JSDocs/Home/Coursera/Reproducible Research/Course Projects/RepData_PeerAssessment1/activity/Debug.R', echo=TRUE)
debugSource('~/JSDocs/Home/Coursera/Reproducible Research/Course Projects/RepData_PeerAssessment1/activity/Debug.R', echo=TRUE)
i
aDataF[idx[i,]]
aDataF[idx[i],]
debugSource('~/JSDocs/Home/Coursera/Reproducible Research/Course Projects/RepData_PeerAssessment1/activity/Debug.R', echo=TRUE)
aDataF[idx[i],]
aDataF=aData
debugSource('~/JSDocs/Home/Coursera/Reproducible Research/Course Projects/RepData_PeerAssessment1/activity/Debug.R', echo=TRUE)
debugSource('~/JSDocs/Home/Coursera/Reproducible Research/Course Projects/RepData_PeerAssessment1/activity/Debug.R', echo=TRUE)
print("i");print(aDataF[idx[i],]$steps)
}
x
debugSource('~/JSDocs/Home/Coursera/Reproducible Research/Course Projects/RepData_PeerAssessment1/activity/Debug.R', echo=TRUE)
debugSource('~/JSDocs/Home/Coursera/Reproducible Research/Course Projects/RepData_PeerAssessment1/activity/Debug.R', echo=TRUE)
intrv
m1
debugSource('~/JSDocs/Home/Coursera/Reproducible Research/Course Projects/RepData_PeerAssessment1/activity/Debug.R', echo=TRUE)
m1
m2
debugSource('~/JSDocs/Home/Coursera/Reproducible Research/Course Projects/RepData_PeerAssessment1/activity/Debug.R', echo=TRUE)
m1
m2
m1
m2
idx=which(is.na(aData$steps))  #find the indexes for the na values
aDataF <- aData
for(i in seq_along(idx)) {
intrv = aDataF[idx[1],]$interval
x=which(intervalMean$interval==intrv)
aDataF[idx[1],]$steps = intervalMean[x,]$avgByInterval
}
mean(aData$steps)
mean(aDataf$steps)
idx=which(is.na(aData$steps))  #find the indexes for the na values
aDataF <- aData
for(i in seq_along(idx)) {
intrv = aDataF[idx[1],]$interval
x=which(intervalMean$interval==intrv)
aDataF[idx[1],]$steps = intervalMean[x,]$avgByInterval
}
mean(aData$steps)
mean(aDataf$steps)
idx=which(is.na(aData$steps))  #find the indexes for the na values
aDataF <- aData
for(i in seq_along(idx)) {
intrv = aDataF[idx[1],]$interval
x=which(intervalMean$interval==intrv)
aDataF[idx[1],]$steps = intervalMean[x,]$avgByInterval
}
mean(aData$steps)
mean(aDataF$steps)
idx=which(is.na(aData$steps))  #find the indexes for the na values
aDataF <- aData
for(i in seq_along(idx)) {
intrv = aDataF[idx[i],]$interval
x=which(intervalMean$interval==intrv)
aDataF[idx[i],]$steps = intervalMean[x,]$avgByInterval
}
mean(aData$steps)
mean(aDataF$steps)
aDataFTbl = group_by(tbl_df(aDataF),date)
dailyStepsF <- summarize(aDataFTbl,total=sum(steps))
dailyMeanF <- summarize(aDataFTbl,avgDayStep=mean(steps))
periodMeanF <- mean(dailyStepsF$total,na.rm=TRUE)
dailyMedianF <- median(dailyStepsF$total,na.rm=TRUE)
periodMean <- mean(dailySteps$total,na.rm=TRUE)
periodMean
periodMeanF
# make a new histogrm of daily steps with missing data "filled"; compare to original
par(mfrow=c(1,2))
hist(dailySteps$total)
hist(dailyStepsF$total)
#debugging code
aDataFTbl = group_by(tbl_df(aDataF),date)
dailyStepsF <- summarize(aDataFTbl,total=sum(steps))
dailyMeanF <- summarize(aDataFTbl,avgDayStep=mean(steps))
periodMeanF <- mean(dailyStepsF$total)
dailyMedianF <- median(dailyStepsF$total)
periodMean <- mean(dailySteps$total)
periodMean
periodMeanF
# make a new histogrm of daily steps with missing data "filled"; compare to original
par(mfrow=c(1,2))
hist(dailySteps$total)
hist(dailyStepsF$total)
sum(dailyMeanF$steps)
View(dailyMeanF)
sum(dailyMeanF$avgDaySte)
sum(dailyMeanF$avgDayStep
)
sum(dailyMean$avgDayStep
)
aDataFTbl = group_by(tbl_df(aDataF),date)
dailyStepsF <- summarize(aDataFTbl,total=sum(steps))
periodMeanF <- mean(dailyStepsF$total)
periodMedianF <-median(dailyStepsF$total)
periodMeanF
periodMedianF
# make a new histogrm of daily steps with missing data "filled"; compare to original
par(mfrow=c(1,2))
hist(dailySteps$total)
hist(dailyStepsF$total)
columns(dailyStepsF)
col(dailyStepsF)
summary(dailyStepsF)
summaryT=cbind(dailySteps,dailyMean,dailyStepsF,dailyMeanF)
head(summaryT)
summary(idx)
last(aData)
tail(aData)
summary(idx)
#debugging code
summaryT=cbind(dailySteps,dailyMean,dailyStepsF,dailyMeanF)
head(summaryT)
tail(summaryT)
?weekday()
library(plyr)
?weekday()
?weekdays()
weekdays(aDataF$date[1])
temp <- mutate(aDataF,WkDay=weekdays(date))
View(temp)
temp <- mutate(temp,WkDayInd=WkDay !%in% c("Sunday","Saturday"))
temp <- mutate(temp,WkEnd=WkDay %in% c("Sunday","Saturday"))
View(temp)
temp <- mutate(aDataF,WkDay=weekdays(date))
if (temp$WkDay %in% c("Sunday","Saturday")){
temp$WkDay <- "weekend"
} else
temp$WkDay <- "weekday"
}
temp$WkDay <- factor(temp$WkDay)
temp <- mutate(aDataF,WkDay=weekdays(date))
if (temp$WkDay %in% c("Sunday","Saturday")){
temp$WkDay <- "weekend"
} else {}
temp$WkDay <- "weekday"
}
temp$WkDay <- factor(temp$WkDay)
View(temp)
summary(temp)
temp <- mutate(aDataF,WkDay=weekdays(date))
if (temp$WkDay %in% c("Sunday","Saturday")){
View(temp)
View(temp)
View(temp)
}
rm(temp)
temp <- mutate(aDataF,WkDay}=weekdays(date))
temp <- mutate(aDataF,WkDay)=weekdays(date))
temp <- mutate(aDataF,WkDay=weekdays(date))
View(temp)
tail(temp)
tail(temp,17000:17400)
tail(temp,100)
temp[15500:16000,[[4]]]
temp[15500:16000,"WkDay"]
if (temp$WkDay[15500:16000] %in% c("Sunday","Saturday")){
temp$WkDay[15500:16000] <- "weekend"
} else {}
temp$WkDay[15500:16000] <- "weekday"
}
if (temp$WkDay[15500:16000] %in% c("Sunday","Saturday")){
temp$WkDay[15500:16000] <- "weekend"
} else {
temp$WkDay[15500:16000] <- "weekday"
}
temp <- mutate(aDataF,WkDay=weekdays(date))
if (temp$WkDay %in% c("Sunday","Saturday")){
temp$WkDay <- "weekend"
} else {
temp$WkDay <- "weekday"
}
temp$WkDay <- factor(temp$WkDay)
View(temp)
View(temp[15500:16000]
)
View(temp[15500:16000,]
)
rm(temp)
debugSource('~/JSDocs/Home/Coursera/Reproducible Research/Course Projects/RepData_PeerAssessment1/activity/Debug2.R', echo=TRUE)
debugSource('~/JSDocs/Home/Coursera/Reproducible Research/Course Projects/RepData_PeerAssessment1/activity/Debug2.R', echo=TRUE)
temp$wkDay[15500] %in% c("Sunday,"Saturday"")
temp$wkDay[15500]
temp$wkDay[15550
]
temp$wkDay[15570]
temp$wkDay[155700] %in% c("Sunday,"Saturday")
str(temp$wkDay)
str(temp$wkDay[15570]
)
"Saturday" %in% c("Sunday,"Saturday")
"Saturday" %in% c('Sunday','Saturday')
debugSource('~/JSDocs/Home/Coursera/Reproducible Research/Course Projects/RepData_PeerAssessment1/activity/Debug2.R', echo=TRUE)
View(temp)
debugSource('~/JSDocs/Home/Coursera/Reproducible Research/Course Projects/RepData_PeerAssessment1/activity/Debug2.R', echo=TRUE)
temp <- mutate(aDataF,wkDay=weekdays(date))
temp2 <- ifelse (temp$wkDay %in% c('Sunday','Saturday'),"weekend","weekday")
temp2[15570]
temp$wkDay <- factor(temp2)
View(temp)
str(temp2)
summary(temp2)
temp$wkDay <- as.factor(temp2)
temp$wkDay[15540:15570]
str(temp$wkDay)
temp <- mutate(aDataF,wkDay=weekdays(date))
temp <- ifelse (temp$wkDay %in% c('Sunday','Saturday'),"weekend","weekday")
aDataF$wkDay <- as.factor(temp)
View(aDataF)
aDataF2Tbl = group_by(tbl_df(aDataF),interval,wkDay)
View(aDataFTbl)
aDF2Tbl = group_by(tbl_df(aDataF),interval,wkDay)
rm(aDataF2Tbl)
aDF2Tbl = group_by(tbl_df(aDataF),interval,wkDay)
summarize(aDF2Tbl,avWkDTInt=mean(steps))
avWkDTInt= summarize(aDF2Tbl,avgSteps=mean(steps))
View(avWkDTInt)
str(aDF2Tbl)
aDF2Tbl = group_by(tbl_df(aDataF),interval)
avWkDTInt= summarize(aDF2Tbl,avgSteps=mean(steps))
View(avWkDTInt)
aDF2Tbl %>%
group_by(interval) %>%
summarize(avgSteps=mean(steps))
aDF2Tbl= aDataF
aDF2Tbl %>%
group_by(interval) %>%
summarize(avgSteps=mean(steps))
View(aDF2Tbl)
View(aDF2Tbl)
View(aDataF)
str(aDataF)
str(aDF2Tbl)
aDF2Tbl= tbl_df(aDataF)
aDF2Tbl %>%
group_by(interval) %>%
summarize(avgSteps=mean(steps))
str(aDF2Tbl)
View(aDF2Tbl)
summarize(by_interval,avgSteps=mean(steps))
by_interval <- group_by(aDataF, interval)
str(by_interval)
by_interval <- group_by(aDataF, interval)
avgSteps=summarize(by_interval,avgSteps=mean(steps))
View(avgSteps)
by_interval <- group_by(aDataF, interval)
avgSteps=summarize(by_interval,avgSteps=mean(steps))
View(avgSteps)
by_Date <- group_by(aDataF, Date)
by_Date <- group_by(aDataF, date)
avgSteps=summarize(by_interval,avgSteps=mean(steps))
View(by_Date)
by_interval <- group_by(aDataF, interval, wkDay)
avgSteps=summarize(by_interval,avgSteps=mean(steps))
View(avgSteps)
library(dplyr)
